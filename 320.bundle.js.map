{"version":3,"file":"320.bundle.js","mappings":"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","sources":["webpack://wasm-game-of-life/../pkg/wasm_game_of_life_bg.js","webpack://wasm-game-of-life/../pkg/wasm_game_of_life.js","webpack://wasm-game-of-life/./src/index.js"],"sourcesContent":["let wasm;\nexport function __wbg_set_wasm(val) {\n    wasm = val;\n}\n\n\nconst heap = new Array(128).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 132) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length, 1) >>> 0;\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len, 1) >>> 0;\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n/**\n*/\nexport const Cell = Object.freeze({ Dead:0,\"0\":\"Dead\",Alive:1,\"1\":\"Alive\", });\n/**\n*/\nexport class Universe {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Universe.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_universe_free(ptr);\n    }\n    /**\n    */\n    tick() {\n        wasm.universe_tick(this.__wbg_ptr);\n    }\n    /**\n    * @returns {Universe}\n    */\n    static new() {\n        const ret = wasm.universe_new();\n        return Universe.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    render() {\n        let deferred1_0;\n        let deferred1_1;\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.universe_render(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            deferred1_0 = r0;\n            deferred1_1 = r1;\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    width() {\n        const ret = wasm.universe_width(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    height() {\n        const ret = wasm.universe_height(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    cells() {\n        const ret = wasm.universe_cells(this.__wbg_ptr);\n        return ret;\n    }\n    /**\n    * @param {number} width\n    */\n    set_width(width) {\n        wasm.universe_set_width(this.__wbg_ptr, width);\n    }\n    /**\n    * @param {number} height\n    */\n    set_height(height) {\n        wasm.universe_set_height(this.__wbg_ptr, height);\n    }\n    /**\n    * @param {number} row\n    * @param {number} column\n    */\n    toggle_cell(row, column) {\n        wasm.universe_toggle_cell(this.__wbg_ptr, row, column);\n    }\n}\n\nexport function __wbg_new_abda76e883ba8a5f() {\n    const ret = new Error();\n    return addHeapObject(ret);\n};\n\nexport function __wbg_stack_658279fe44541cf6(arg0, arg1) {\n    const ret = getObject(arg1).stack;\n    const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len1 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len1;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr1;\n};\n\nexport function __wbg_error_f851667af71bcfc6(arg0, arg1) {\n    let deferred0_0;\n    let deferred0_1;\n    try {\n        deferred0_0 = arg0;\n        deferred0_1 = arg1;\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(deferred0_0, deferred0_1, 1);\n    }\n};\n\nexport function __wbindgen_object_drop_ref(arg0) {\n    takeObject(arg0);\n};\n\nexport function __wbg_time_fa135a7c2786e907(arg0, arg1) {\n    console.time(getStringFromWasm0(arg0, arg1));\n};\n\nexport function __wbg_timeEnd_594d82f147c9776f(arg0, arg1) {\n    console.timeEnd(getStringFromWasm0(arg0, arg1));\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n","import * as wasm from \"./wasm_game_of_life_bg.wasm\";\nimport { __wbg_set_wasm } from \"./wasm_game_of_life_bg.js\";\n__wbg_set_wasm(wasm);\nexport * from \"./wasm_game_of_life_bg.js\";\n","import { Universe, Cell } from \"../../pkg/wasm_game_of_life\";\nimport { memory } from \"../../pkg/wasm_game_of_life_bg.wasm\"\nrequire(\"../styles/styles.scss\")\n\nconst CELL_SIZE = 5; // px\nconst GRID_COLOR = \"#CCCCCC\";\nconst DEAD_COLOR = \"#FFFFFF\";\nconst ALIVE_COLOR = \"#000000\";\n\nconst universe = Universe.new()\nconst width = universe.width()\nconst height = universe.height()\n\nconst dimensionArray = [...Array(height).keys()]\n\nconst canvas = document.querySelector('[data-game=\"canvas\"]')\ncanvas.height = (CELL_SIZE + 1) * height + 1\ncanvas.width = (CELL_SIZE + 1) * width + 1\n\ncanvas.imageSmoothingEnabled = false;\n\nconst ctx = canvas.getContext('2d')\n\nlet animationId = null\n\nconst renderLoop = () => {\n  fps.render()\n  universe.tick()\n\n  drawGrid()\n  drawCells()\n\n  animationId = requestAnimationFrame(renderLoop)\n}\n\nconst drawGrid = () => {\n  ctx.beginPath()\n  ctx.strokeStyle = GRID_COLOR\n\n  // Vertical lines.\n  for (let i = 0; i <= width; i++) {\n    ctx.moveTo(i * (CELL_SIZE + 1) + 1, 0);\n    ctx.lineTo(i * (CELL_SIZE + 1) + 1, (CELL_SIZE + 1) * height + 1);\n  }\n\n  // Horizontal lines.\n  for (let j = 0; j <= height; j++) {\n    ctx.moveTo(0,                           j * (CELL_SIZE + 1) + 1);\n    ctx.lineTo((CELL_SIZE + 1) * width + 1, j * (CELL_SIZE + 1) + 1);\n  }\n\n  ctx.stroke();\n}\n\nconst getIndex = (row, column) => {\n  return row * width + column;\n};\n\nconst drawCells = () => {\n  const cellsPtr = universe.cells()\n  const cells = new Uint8Array(memory.buffer, cellsPtr, width * height)\n\n  ctx.beginPath()\n\n  drawCell(cells, true)\n  drawCell(cells, false)\n\n  ctx.stroke();\n}\n\nconst drawCell = (cells, isAlive) => {\n  ctx.fillStyle = isAlive ? ALIVE_COLOR : DEAD_COLOR;\n  const cellStatus = isAlive ? Cell.Alive : Cell.Dead\n\n  for (let row = 0; row < height; row++) {\n    for (let col = 0; col < width; col++) {\n      const idx = getIndex(row, col)\n      \n      if (cells[idx] !== cellStatus) {\n        continue\n      }\n\n      ctx.fillRect(\n        col * (CELL_SIZE + 1) + 1,\n        row * (CELL_SIZE + 1) + 1,\n        CELL_SIZE,\n        CELL_SIZE\n      )\n    }\n  }\n}\n\nconst playPauseButton = document.querySelector('[data-game=\"play-pause\"]')\n\nconst play = () => {\n  playPauseButton.textContent = \"pause\"\n  renderLoop()\n}\n\nconst pause = () => {\n  playPauseButton.textContent = \"play\"\n  cancelAnimationFrame(animationId)\n  animationId = null\n}\n\nconst isPaused = () => {\n  return animationId === null\n}\n\nplayPauseButton.addEventListener('click', event => {\n  isPaused() ? play() : pause()\n})\n\ncanvas.addEventListener('click', event => {\n  const boundingRect = canvas.getBoundingClientRect()\n  \n  const scaleX = canvas.width / boundingRect.width\n  const scaleY = canvas.height / boundingRect.height\n\n  const canvasLeft = (event.clientX - boundingRect.left) * scaleX\n  const canvasTop = (event.clientY - boundingRect.top) * scaleY\n\n  const row = Math.min(Math.floor(canvasTop / (CELL_SIZE + 1)), height - 1)\n  const col = Math.min(Math.floor(canvasLeft / (CELL_SIZE + 1)), width - 1)\n\n  universe.toggle_cell(row, col)\n\n  drawGrid()\n  drawCells()\n})\n\nconst fps = new class {\n  constructor() {\n    this.fps = document.querySelector('[data-game=\"fps\"]')\n    this.frames = [];\n    this.lastFrameTimeStamp = performance.now();\n  }\n\n  render() {\n    // Convert the delta time since the last frame render into a measure\n    // of frames per second.\n    const now = performance.now();\n    const delta = now - this.lastFrameTimeStamp;\n    this.lastFrameTimeStamp = now;\n    const fps = 1 / delta * 1000;\n\n    // Save only the latest 100 timings.\n    this.frames.push(fps);\n    if (this.frames.length > 100) {\n      this.frames.shift();\n    }\n\n    // Find the max, min, and mean of our 100 latest timings.\n    let min = Infinity;\n    let max = -Infinity;\n    let sum = 0;\n    for (let i = 0; i < this.frames.length; i++) {\n      sum += this.frames[i];\n      min = Math.min(this.frames[i], min);\n      max = Math.max(this.frames[i], max);\n    }\n    let mean = sum / this.frames.length;\n\n    // Render the statistics.\n    this.fps.textContent = `\n      Frames per Second:\n      latest = ${Math.round(fps)}\n      avg of last 100 = ${Math.round(mean)}\n      min of last 100 = ${Math.round(min)}\n      max of last 100 = ${Math.round(max)}\n    `.trim();\n  }\n};\n\ndrawGrid()\ndrawCells()\nplay()"],"names":["wasm","__wbg_set_wasm","val","heap","Array","fill","undefined","getObject","idx","push","heap_next","length","cachedTextDecoder","TextDecoder","module","require","ignoreBOM","fatal","decode","cachedUint8Memory0","getUint8Memory0","byteLength","Uint8Array","memory","buffer","getStringFromWasm0","ptr","len","subarray","cachedInt32Memory0","getInt32Memory0","Int32Array","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","written","Cell","Object","freeze","Dead","Alive","Universe","static","obj","create","prototype","__wbg_ptr","__destroy_into_raw","this","free","__wbg_universe_free","tick","universe_tick","ret","universe_new","__wrap","render","deferred1_0","deferred1_1","retptr","__wbindgen_add_to_stack_pointer","universe_render","r0","r1","__wbindgen_free","width","universe_width","height","universe_height","cells","universe_cells","set_width","universe_set_width","set_height","universe_set_height","toggle_cell","row","column","universe_toggle_cell","__wbg_new_abda76e883ba8a5f","addHeapObject","Error","__wbg_stack_658279fe44541cf6","arg0","arg1","ptr1","malloc","realloc","mem","offset","code","charCodeAt","slice","passStringToWasm0","stack","__wbindgen_malloc","__wbindgen_realloc","len1","__wbg_error_f851667af71bcfc6","deferred0_0","deferred0_1","console","error","__wbindgen_object_drop_ref","dropObject","takeObject","__wbg_time_fa135a7c2786e907","time","__wbg_timeEnd_594d82f147c9776f","timeEnd","__wbindgen_throw","universe","new","canvas","keys","document","querySelector","imageSmoothingEnabled","ctx","getContext","animationId","renderLoop","fps","drawGrid","drawCells","requestAnimationFrame","beginPath","strokeStyle","i","moveTo","lineTo","j","stroke","getIndex","cellsPtr","drawCell","isAlive","fillStyle","cellStatus","col","fillRect","playPauseButton","play","textContent","addEventListener","event","cancelAnimationFrame","boundingRect","getBoundingClientRect","scaleX","scaleY","canvasLeft","clientX","left","canvasTop","clientY","top","Math","min","floor","constructor","frames","lastFrameTimeStamp","performance","now","delta","shift","Infinity","max","sum","mean","round","trim"],"sourceRoot":""}